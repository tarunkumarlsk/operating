
#include <unistd.h>
#include <stdlib.h>
int main() {
    int pid[4];
    int i, j;
    for (i = 0; i < 4; i++) {
        pid[i] = fork();
        if (pid[i] == -1) {
            printf("Failed to fork\n");
            exit(1);
        } else if (pid[i] == 0) {
            switch (i) {
                case 0:
                    printf("Child process %d (odd numbers): ", getpid());
                    for (j = 1; j <= 10; j += 2) {
                        printf("%d ", j);
                    }
                    printf("\n");
                    break;
                case 1:
                    printf("Child process %d (even numbers): ", getpid());
                    for (j = 2; j <= 10; j += 2) {
                        printf("%d ", j);
                    }
                    printf("\n");
                    break;
                case 2:
                    printf("Child process %d (multiples of 3): ", getpid());
                    for (j = 3; j <= 30; j += 3) {
                        printf("%d ", j);
                    }
                    printf("\n");
                    break;
                case 3:
                    printf("Child process %d (multiples of 5): ", getpid());
                    for (j = 5; j <= 50; j += 5) {
                        printf("%d ", j);
                    }
                    printf("\n");
                    break;
                default:
                    break;
            }
            exit(0);
        }
    }
    for (i = 0; i < 4; i++) {
        waitpid(pid[i], NULL, 0);
    }
    return 0;
}
